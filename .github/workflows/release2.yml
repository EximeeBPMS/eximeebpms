name: Release Workflow


on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Next version number'
        required: true
        default: '1.0.0'
      branch:
        description: 'Branch to release from'
        required: true
        default: 'main'
      dry_run:
        description: 'Perform a dry run without deploying or tagging.'
        required: true
        default: 'true'
        type: boolean

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{github.event.inputs.branch}}

      # Set up Java (Maven)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Zainstaluj zależności Mavena
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Zmiana wersji w pliku pom.xml
      - name: Update version in pom.xml
        run: |
          mvn versions:set -DnewVersion=${{ github.event.inputs.version }} -DgenerateBackupPoms=false

      # Budowanie projektu
      - name: Build project with Maven
        run: mvn clean install -DskipTests

      # Jeśli dry-run to pomijamy publikację i tagowanie
      - name: Dry run check
        if: ${{ github.event.inputs.dry_run == 'true' }}
        run: |
          echo "Dry run: Skipping deployment and tagging actions."

      # Zalogowanie do GitHub Packages i publikowanie artefaktów tylko jeśli nie dry-run
      - name: Deploy to GitHub Packages
        if: ${{ github.event.inputs.dry_run == 'false' }}
        run: mvn deploy -DskipTests -DaltDeploymentRepository=github::default::https://maven.pkg.github.com/${{ github.repository_owner }}/your-repo-name

      # Tworzenie tagu wersji tylko jeśli nie dry-run
      - name: Create version tag
        if: ${{ github.event.inputs.dry_run == 'false' }}
        run: |
          git tag v${{ github.event.inputs.version }}
          git push origin v${{ github.event.inputs.version }}

      # Tworzenie release na GitHubie tylko jeśli nie dry-run
      - name: Create GitHub Release
        if: ${{ github.event.inputs.dry_run == 'false' }}
        uses: softprops/action-gh-release@v1
        with:
          files: ./target/*.jar  # Zmień ścieżkę do plików zależnie od tego, co chcesz dodać do releasu
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Zaktualizowanie wersji na wersję SNAPSHOT po releasie
      - name: Set next version to SNAPSHOT
        if: ${{ github.event.inputs.dry_run == 'false' }}
        run: |
          # Wyciągamy numer głównej wersji i inkrementujemy go
          version_parts=(${GITHUB_REF#refs/tags/v})
          major_version=$(echo ${version_parts[0]} | cut -d'.' -f1)
          minor_version=$(echo ${version_parts[0]} | cut -d'.' -f2)
          new_version="${major_version}.$((minor_version + 1)).0-SNAPSHOT"
          echo "Next version: $new_version"
          mvn versions:set -DnewVersion=$new_version -DgenerateBackupPoms=false
          git add pom.xml
          git commit -m "Set next development version to $new_version"
          git push origin ${{ github.event.inputs.branch }}
